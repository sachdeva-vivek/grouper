 
 
# The grouper client uses Grouper Configuration Overlays (documented on wiki)
# By default the configuration is read from grouper.client.base.properties
# (which should not be edited), and the grouper.client.properties overlays
# the base settings.  See the grouper.client.base.properties for the possible
# settings that can be applied to the grouper.client.properties

########################################
## Config chaining hierarchy
########################################

# comma separated config files that override each other (files on the right override the left)
# each should start with file: or classpath:
# e.g. classpath:grouper.client.example.properties, file:c:/something/myconfig.properties
authzStandardApiClient.config.hierarchy = classpath:authzStandardApi.client.base.properties, classpath:authzStandardApi.client.properties

# seconds between checking to see if the config files are updated
authzStandardApiClient.config.secondsBetweenUpdateChecks = 60

########################################
## Web service Connection settings
########################################

# url of web service, should include everything up to the first resource to access
# e.g. http://authz.school.edu:8090/authzStandardApi/authzStandardApi
# e.g. https://authz.school.edu/authzStandardApi/authzStandardApi
authzStandardApiClient.webService.url =

# kerberos principal used to connect to web service
authzStandardApiClient.webService.login = 

# password for shared secret authentication to web service
# or you can put a filename with an encrypted password
authzStandardApiClient.webService.password = 

########################################
## Encrypted password settings
########################################

# Put a random alphanumeric string (Case sensitive) for the password encryption.  e.g. fh43IRJ4Nf5
# or put a filename where the random alphanumeric string is.  
# e.g. c:/whatever/key.txt
# e.g. sdfklj24lkj34lk34
encrypt.key = 

# set this to true if you have slashes in your passwords and dont want to look in external files or unencrypt
encrypt.disableExternalFileLookup = false 

########################################
## Web Service Settings
########################################

# socket timeout
authzStandardApiClient.webService.httpSocketTimeoutMillis = 90000

# connection manager timeout
authzStandardApiClient.webService.httpConnectionManagerTimeoutMillis = 90000


########################################
## Logging
########################################

# if you want ws requests and responses being logged to files, put the directory here.  
# The grouper client will create subdirs
authzStandardApiClient.logging.webService.documentDir = 

# try to indent the xml.  If this fails for some reason, or you want the raw xml, 
# set to false
authzStandardApiClient.logging.webService.indent = true

# if the masked password should be logged (if false, dont log anything about password)
# the masked password will show how many chars the password is (helpful for diagnosing 
# password encryption issues)
authzStandardApiClient.logging.logMaskedPassword = false

# If you dont have log4j or another logger, use this: SEVERE, WARNING, INFO, CONFIG, FINE, FINER, FINEST 
#authzStandardApiClient.logging.logLevel =
#authzStandardApiClient.logging.logFile =
#authzStandardApiClient.logging.authzStandardApiClientOnly.logLevel = 

#######################################
## output templates
#######################################

webService.defaultResourceWs.output = xml: ${defaultResource.xmlDefaultUri}$newline$json: ${defaultResource.jsonDefaultUri}$newline$
webService.defaultVersionResourceWs.output = v1: ${defaultVersionResource.v1Uri}$newline$
webService.versionResourceWs.output = entities: ${versionResource.entitiesUri}$newline$folders: ${versionResource.foldersUri}$newline$groups: ${versionResource.groupsUri}$newline$permissions: ${versionResource.permissionsUri}$newline$
webService.testSuite.output = ${asacTestSuiteResults.report}$newline$$newline$${asacTestSuiteResults.summaryLabel} overall, tests: ${asacTestSuiteResults.testCount}, successes: ${asacTestSuiteResults.successCount}, failures: ${asacTestSuiteResults.failureCount}, warnings: ${asacTestSuiteResults.warningCount}
Success: code: FOLDER_CREATED: a:b

########################################
## Misc settings
########################################

# this should probably be UTF-8 for international charsets... for US it can be: ISO-8859-1
authzStandardApiClient.default.fileEncoding = UTF-8

# if when escaping uris if colons should be escaped
authzStandardApiClient.escapeUriColons = false

# if we should fail on extra unused command line args
authzStandardApiClient.failOnExtraCommandLineArgs = true

########################################
## Unit testing
########################################

# root folder where unit tests should go
authzStandardApiClient.unitTest.rootFolder = 
